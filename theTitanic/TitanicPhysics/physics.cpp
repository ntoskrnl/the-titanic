//915 Gilmullin A
//Наброски физики для проекта the Titanic (aka theLoop).
// Я бы назвал это отдебаженным псевдокодом.

#include <iostream>

/* Это добро в отдельный файл. */
/*Структура для представления векторов.*/
typedef struct {
        float x;
        float y;
} vector; 
/*------------------------------------------------------------------------*/
/* Сложение векторов. */
vector add ( vector a, vector b ) {
       vector c;
       c.x = a.x + b.x;
       c.y = a.y + b.y;
       return c;
}
/*------------------------------------------------------------------------*/
/* Скалярное умножение векторов. */
float scMul ( vector a, vector b ){
      return a.x * b.x + a.y * b.y;
}
/*------------------------------------------------------------------------*/
/* Умножение вектора на число. */
vector operator * ( float a, vector b ){
      vector c;
             c.x = b.x * a;
             c.y = b.y * a;
      return c;
}      
/*------------------------------------------------------------------------*/
/* Чисто дебажная функция, хотя, надеюсь, в финальном релизе она
таки будет присутствовать. */
void printVector( vector a ){
     using namespace std;
     cout << "vector: (" << a.x << "," << a.y << ")" << endl;
}
/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/
/*------------------------------------------------------------------------*/



/*Тоже в отдельный файл*/
/* Радиус шара.  */
const float BallRadius = 2.5;
/*------------------------------------------------------------------------*/
/* Класс для представления шаров. */
typedef class Ball Ball;
class Ball{
      public:
             //N - номер шара.
             Ball(int N = 0, float X = 0, float Y = 0){
                        n = N;
                        
                        x = X;
                        y = Y;
                        
                        v.x = 0;
                        v.y = 0;
             }
             int n;
             //Координаты шара.
             float x;
             float y;
             //Скорость шара.
             vector v;
      void to_string(){
           //Всё как у людей.
           using namespace std;
           cout << "ball " << n << endl;
           cout << "(" << x << "," << y << ")" << endl;
           cout << "speed: " << "(" << v.x << "," << v.y << ")" << endl;
      }
};
/*------------------------------------------------------------------------*/
/* Столкновение шариков. */
void impact( Ball &a, Ball &b ){
     /*
     Здесь всё просто: закон сохранения импульса и аналит:-)
     */
     
     // Вектор соединяющий середины шаров.
     vector c;
            c.x = a.x - b.x;
            c.y = a.y - b.y;
     // Вектор ему ортогональный.
     vector d;
            d.x = -c.y;
            d.y =  c.x;
            
     // Важный момент: поскольку шары столкнулись, расстояние между ними
     // равно 2*BallRadius!
     
     vector v1;
            v1 = (1/(4*BallRadius*BallRadius)) 
               * add( scMul(b.v , c)*c , scMul(a.v , d)*d );
     vector v2;
            v2 = (1/(4*BallRadius*BallRadius)) 
               * add( scMul(a.v , c)*c , scMul(b.v , d)*d );
               
     a.v = v1;
     b.v = v2;
}
/*------------------------------------------------------------------------*/

int main(){
    using namespace std;
    //Тестирую вектора.
    vector a;
           a.x = 0;
           a.y = 1;
    vector b;
           b.x = 0;
           b.y = -1;
    printVector(a);
    printVector(b);
    printVector(add(a,b));
    cout << scMul( a,b ) <<endl;

    //Тестирую шарики.
    Ball f1(1,0,0);
    f1.v = a;
    Ball f2(2,0,5);
    f2.v = b;
    //До столкновения
    f1 . to_string();
    f2 . to_string();
    //После столкновения
    impact(f1,f2);
    f1 . to_string();
    f2 . to_string();
        

    return 0;
}
